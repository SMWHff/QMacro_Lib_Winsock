[KeyPress]
格式：KeyPress {键盘虚拟码},{次数} 
解释：先“按下”再“弹起”键，模拟我们平时的“按键”操作
我们在使用键盘的时候有两种操作，,一种是“按下”键，一种是“弹起”键
将这两个动作连续进行，就是一个完整的“按键”动作。按键精灵可以模拟所有的键盘动作。

[KeyDown]
格式：KeyDown {键盘虚拟码},{次数} 
解释：“按下”键，模拟我们平时的“按下”操作
注意：有些键在按下之后，会和其他键产生组合效果，比如“Alt/Ctrl/Shift”，
如果使用“按下Alt”命令，那么之后的“按键”动作将变成“Alt+A”等组合动作，
因此记得在必要时使用“弹起”命令将组合键释放，避免影响键盘的正常使用。

[KeyUp]
格式：KeyUp {键盘虚拟码},{次数} 
解释：“弹起”键，模拟我们平时的“弹起”操作

[KeyPressH] 
格式：KeyPressH {键盘虚拟码},{次数} 
解释：模拟按键，与KeyPress功能类似，先“按下”再“弹起”键，但采取了硬件模拟的方式，
在某些情况下普通模拟按键命令会失效，不妨试试硬件模拟命令。

[KeyDownH] 
格式：KeyDownH {键盘虚拟码},{次数} 
解释：模拟按下，与KeyDown功能类似，“按下”键，但采取了硬件模拟的方式，
在某些情况下普通模拟按键命令会失效，不妨试试硬件模拟命令。

[KeyUpH]
格式：KeyUpH {键盘虚拟码},{次数} 
解释：模拟弹起，与KeyUp功能类似，“弹起”键，但采取了硬件模拟的方式，
在某些情况下普通模拟按键命令会失效，不妨试试硬件模拟命令。

[KeyPressS] 
格式：KeyPressS {键盘虚拟码},{次数} 
解释：模拟按键，与KeyPress功能类似，先“按下”再“弹起”键，但采取了新的超级模拟方式，
在某些情况下普通模拟按键命令会失效，不妨试试超级模拟命令。

[KeyDownS] 
格式：KeyDownS {键盘虚拟码},{次数} 
解释：模拟按下，与KeyDown功能类似,“按下”键，但采取了新的超级模拟方式，
在某些情况下普通模拟按键命令会失效，不妨试试超级模拟命令。

[KeyUpS]
格式：KeyUpS {键盘虚拟码},{次数} 
解释：模拟弹起，与KeyUp功能类似，“弹起”键，但采取了新的超级模拟方式，
在某些情况下普通模拟按键命令会失效，不妨试试超级模拟命令。

[KeyGroup]
格式：KeyGroup {按键码+按键码}
解释：除了ctrl+alt+del，基本其他都能正常按出哦！
举例：
组合键 = "alt+f"
KeyGroup 组合键
'在按之前可以使用SetSimMode来设定虚拟模式哦

[WaitKey]
格式：{变量名} = WaitKey  （注意这里是“变量名”不是“表达式”）
解释：脚本运行到此句之后暂停，等待用户按键，用户按键之后，将按键结果保存到变量当中。

[GetLastKey]
格式：{变量名} = GetLastKey  （注意这里是“变量名”不是“表达式”）
解释：脚本运行到此句之后不暂停，将上次用户按键的结果保存到变量当中。

[LeftClick]
格式：LeftClick {次数}
解释：在鼠标当前位置模拟点击鼠标左键。{次数}可以控制点击的次数。

[RightClick]
格式：RightClick {次数}
解释：在鼠标当前位置模拟点击鼠标右键。

[MiddleClick]
格式：MiddleClick {次数}
解释：在鼠标当前位置模拟点击鼠标中键。

[LeftDoubleClick]
格式：LeftDoubleClick {次数}
解释：在鼠标当前位置模拟双击鼠标左键。

[LeftDown]
格式：LeftDown {次数}
解释：在鼠标当前位置模拟按下鼠标左键，{次数}在这个语句中虽然有效，但没有实际意义。

[LeftUp]
格式：LeftUp {次数}
解释：在鼠标当前位置模拟松开鼠标左键，{次数}在这个语句中虽然有效，但没有实际意义。

[RightDown]
格式：RightDown {次数}
解释：在鼠标当前位置模拟按下鼠标右键，{次数}在这个语句中虽然有效，但没有实际意义。

[RightUp]
格式：RightUp {次数}
解释：在鼠标当前位置模拟松开鼠标右键，{次数}在这个语句中虽然有效，但没有实际意义。

[LeftClickH]
格式：LeftClickH {次数}
解释：使用硬件模拟方式，在鼠标当前位置模拟点击鼠标左键。{次数}可以控制点击的次数，
在某些情况下普通模拟鼠标命令会失效，不妨试试硬件模拟命令。

[RightClickH]
格式：RightClickH {次数}
解释：使用硬件模拟方式，在鼠标当前位置模拟点击鼠标右键，
在某些情况下普通模拟鼠标命令会失效，不妨试试硬件模拟命令。

[MiddleClickH]
格式：MiddleClickH {次数}
解释：使用硬件模拟方式，在鼠标当前位置模拟点击鼠标中键，
在某些情况下普通模拟鼠标命令会失效，不妨试试硬件模拟命令。

[LeftDoubleClickH]
格式：LeftDoubleClickH {次数}
解释：使用硬件模拟方式，在鼠标当前位置模拟双击鼠标左键，
在某些情况下普通模拟鼠标命令会失效，不妨试试硬件模拟命令。

[LeftDownH]
格式：LeftDownH {次数}
解释：使用硬件模拟方式，在鼠标当前位置模拟按下鼠标左键，{次数}在这个语句中虽然有效，但没有实际意义，
在某些情况下普通模拟鼠标命令会失效，不妨试试硬件模拟命令。

[LeftUpH]
格式：LeftUpH {次数}
解释：使用硬件模拟方式，在鼠标当前位置模拟松开鼠标左键，{次数}在这个语句中虽然有效，但没有实际意义，
在某些情况下普通模拟鼠标命令会失效，不妨试试硬件模拟命令。

[RightDownH]
格式：RightDownH {次数}
解释：使用硬件模拟方式，在鼠标当前位置模拟按下鼠标右键，{次数}在这个语句中虽然有效，但没有实际意义，
在某些情况下普通模拟鼠标命令会失效，不妨试试硬件模拟命令。

[RightUpH]
格式：RightUpH {次数}
解释：使用硬件模拟方式，在鼠标当前位置模拟松开鼠标右键，{次数}在这个语句中虽然有效，但没有实际意义，
在某些情况下普通模拟鼠标命令会失效，不妨试试硬件模拟命令。

[LeftClickS]
格式：LeftClickS {次数}
解释：使用超级模拟方式，在鼠标当前位置模拟点击鼠标左键。{次数}可以控制点击的次数，
在某些情况下普通模拟鼠标命令会失效，不妨试试超级模拟命令。

[RightClickS]
格式：RightClickS {次数}
解释：使用超级模拟方式，在鼠标当前位置模拟点击鼠标右键，
在某些情况下普通模拟鼠标命令会失效，不妨试试超级模拟命令。

[MiddleClickS]
格式：MiddleClickS {次数}
解释：使用超级模拟方式，在鼠标当前位置模拟点击鼠标中键，
在某些情况下普通模拟鼠标命令会失效，不妨试试超级模拟命令。

[LeftDoubleClickS]
格式：LeftDoubleClickS {次数}
解释：使用超级模拟方式，在鼠标当前位置模拟双击鼠标左键，
在某些情况下普通模拟鼠标命令会失效，不妨试试超级模拟命令。

[LeftDownS]
格式：LeftDownS {次数}
解释：使用超级模拟方式，在鼠标当前位置模拟按下鼠标左键，{次数}在这个语句中虽然有效，但没有实际意义，
在某些情况下普通模拟鼠标命令会失效，不妨试试超级模拟命令。

[LeftUpS]
格式：LeftUpS {次数}
解释：使用超级模拟方式，在鼠标当前位置模拟松开鼠标左键，{次数}在这个语句中虽然有效，但没有实际意义，
在某些情况下普通模拟鼠标命令会失效，不妨试试超级模拟命令。

[RightDownS]
格式：RightDownS {次数}
解释：使用超级模拟方式，在鼠标当前位置模拟按下鼠标右键，{次数}在这个语句中虽然有效，但没有实际意义，
在某些情况下普通模拟鼠标命令会失效，不妨试试超级模拟命令。

[RightUpS]
格式：RightUpS {次数}
解释：使用超级模拟方式，在鼠标当前位置模拟松开鼠标右键，{次数}在这个语句中虽然有效，但没有实际意义，
在某些情况下普通模拟鼠标命令会失效，不妨试试超级模拟命令。

[MoveTo]
格式：MoveTo {X坐标},{Y坐标}
解释：移动鼠标到(X坐标,Y坐标)处
举例：
MoveTo 100,200
把鼠标移动到(100,200)这个点上
MoveTo intX,intY
把鼠标移动到(intX,intY)这个点上，需要5.50以上版本支持。

[MoveR]
格式：MoveR {X偏移距离},{Y偏移距离}
解释：把鼠标相对移动(X偏移距离,Y偏移距离)
举例：
当前鼠标在(100,100)点，使用下面语句
MoveR 200,300
之后,鼠标就被移到了(100+200,100+300)处，也就是坐标(300,400)处。

[MouseWheel]
格式：MouseWheel {滚动量}
解释：滚动鼠标滚轮。如果滚动量为正，向上滚动；否则向下滚动，
仅支持Windows 2000以上的操作系统。
举例：
MouseWheel 1
把鼠标滚轮向上滚动1格。

[MoveToH]
格式：MoveToH {X坐标},{Y坐标}
解释：移动鼠标到(X坐标,Y坐标)处，类似于MoveTo，但采用了硬件模拟的方式，
在某些情况下普通模拟鼠标命令会失效，不妨试试硬件模拟命令。

[MoveRH]
格式：MoveRH {X偏移距离},{Y偏移距离}
解释：把鼠标相对移动(X偏移距离,Y偏移距离)，类似于MoveR，但采用了硬件模拟的方式，
在某些情况下普通模拟鼠标命令会失效，不妨试试硬件模拟命令。

[MoveToS]
格式：MoveToS {X坐标},{Y坐标}
解释：移动鼠标到(X坐标,Y坐标)处，类似于MoveTo，但采用了超级模拟的方式，
在某些情况下普通模拟鼠标命令会失效，不妨试试超级模拟命令。

[MoveRS]
格式：MoveRS {X偏移距离},{Y偏移距离}
解释：把鼠标相对移动(X偏移距离,Y偏移距离)，类似于MoveR，但采用了超级模拟的方式，
在某些情况下普通模拟鼠标命令会失效，不妨试试超级模拟命令。

[SaveMousePos]
格式：SaveMousePos
解释：保存当前鼠标位置。

[RestoreMousePos]
格式：RestoreMousePos
解释：将鼠标移动到上一次保存的鼠标位置。
举例：保存/恢复鼠标位置常用于制作网络游戏练功脚本，脚本开始时保存鼠标位置，脚本结束时恢复鼠标位置，
这样脚本执行后鼠标的位置就不会变化。

[LockMouse]
格式：LockMouse
解释：锁定鼠标位置，用户将不能通过移动鼠标而改变鼠标位置，而脚本仍可以改变鼠标位置。
举例：在脚本开始的时候使用这个命令，可以有效防止用户误触鼠标引起脚本执行出错。

[UnlockMouse]
格式：UnlockMouse
解释：解除LockMouse命令对鼠标位置的锁定。如果用户使用了LockMouse命令而没有使用UnlockMouse命令，
按键精灵会在脚本结束时自动解除锁定。

[WaitClick]
格式：{变量名} = WaitClick （注意这里是“变量名”不是“表达式”）
解释：脚本执行到这一句暂停，按下任意鼠标键之后继续，按下的鼠标键将被记录在变量之中。
举例：last_click=WaitClick()
MessageBox "您按下了" & last_click

[GetLastClick]
格式：{变量名} = GetLastClick （注意这里是“变量名”不是“表达式”）
解释：检测上一次按下的鼠标代码，不影响脚本执行的流程。

[GetCursorPos]
格式：Call GetCursorPos(返回屏幕x坐标,返回屏幕y坐标)
解释：得到当前鼠标所在的位置坐标。

[GetCursorShape]
格式：{变量名} = GetCursorShape({形状特征码方式})
解释：得到当前鼠标的形状特征。

[If]
格式：
If {表达式} Then
…
ElseIf {表达式} Then
…
Else
…
End If
解释：判断表达式抓点颜色并执行语句－－通过判断表达式的取值，来执行后面的动作或控制。

[IfColor]
格式：
IfColor {X坐标},{Y坐标},{颜色},{判断条件(0：等于 1：不等于 2：近似等于)} Then
…
Else
…
End If
解释：判断颜色并执行语句－－通过判断屏幕x,y坐标的某点的颜色，是等于、不等于、还是近似某颜色，来执行后面的动作或控制。

[Else]
格式：
If {表达式} Then
…
ElseIf {表达式} Then
…
Else
…
End If 
或者
IfColor {X坐标},{Y坐标},{颜色},{判断条件(0：等于 1：不等于 2：近似等于)} Then
…
Else
…
End If
解释：和If或IfColor语句结合，进行高级语言的条件判断。

[ElseIf]
格式：
If {表达式} Then
…
ElseIf {表达式} Then
…
ElseIf {表达式} Then
…
Else
…
End If
解释：和If或IfColor语句结合，进行高级语言的条件判断。

[Then]
格式：If {表达式} Then
解释：和If、IfColor、ElseIf语句结合，进行高级语言的条件判断。

[While]
格式：
While {循环条件}
…
Wend
解释：循环语句－－当循环条件成立的时候，反复执行循环体。

[Wend]
格式：
While {循环条件}
…
Wend
解释：和While一起构成循环语句。

[For]
格式：
For {循环次数}
…
Next
解释：循环语句－－循环一定次数。

[Next]
格式：
For {循环次数}
…
Next
解释：和For一起构成循环语句。

[Select]
格式：
Select Case {变量名}   
Case {情况1}
…
Case {情况2}
…
Case Else
…
End Select 
解释：根据情况选择条件判断。

[Case]
格式：
Select Case {变量名}   
Case {情况}
…
Case Else
…
End Select 
解释：根据情况选择条件判断。

[Do]
格式：
Do While {表达式}
…
Loop
或者
Do Until {表达式}
…
Loop
解释：条件循环。

[Loop]
格式：
Do While {表达式}
…
Loop
或者
Do Until {表达式}
…
Loop
解释：条件循环。

[Until]
格式：
Do Until {表达式}
…
Loop
解释：条件循环。

[Rem]
格式：Rem {文字}
解释：标记命令。即可当注释，也可以为Goto跳转指令作标记。

[Goto]
格式：Goto {标号}
解释：跳转语句，可以跳转到Rem标记过的标记处继续执行。

[Sub]
格式：
Sub {过程名}
…
End Sub
解释：定义一个过程，可以在脚本中调用这个过程。

[Function]
格式：
Function {函数过程名}
…
End Function
解释：定义一个函数过程，可以在脚本中调用这个函数。

[Event]
格式：
Event {窗体名.控件名.事件名}
或
Event {窗体名.事件名}
…
End Event
解释：定义一个事件处理过程，该过程会在相应的事件发生时，自动被调用。


[Call]
格式：
Call {函数或者过程名}
解释：调用函数或者过程。

[End If]
解释：用于配对结束 If 条件判断。

[End Select]
解释：用于配对结束 Select Case 选择情况判断。

[End Sub]
解释：用于配对结束 Sub 子程序过程。

[End Function]
解释：用于配对结束 Function 函数过程。

[End Event]
解释：用于配对结束 Event 事件处理过程。

[End]
格式：End {关键字配对}
解释：
End If       用于配对结束 If 条件判断。
End Select   用于配对结束 Select Case 选择情况判断。
End Sub      用于配对结束 Sub 子程序过程。
End Function 用于配对结束 Function 函数过程。
End Event    用于配对结束 Event 事件处理过程。
End With     用于配对结束 With 对象结构。

[Exit Do]
解释：用于配对退出 Do 循环。

[Exit For]
解释：用于配对退出 For 循环。

[Exit Sub]
解释：用于配对退出 Sub 子程序过程。

[Exit Function]
解释：用于配对退出 Function 函数过程。

[Exit Event]
解释：用于配对退出 Event 事件处理过程。

[Exit]
格式：Exit {关键字配对}
解释：
Exit Do       用于配对退出 Do 循环。
Exit For      用于配对退出 For 循环。
Exit Sub      用于配对退出 Sub 子程序过程。
Exit Function 用于配对退出 Function 函数过程。
Exit Event    用于配对退出 Event 函数过程。

[EndScript]
格式：EndScript
解释：强制结束脚本的执行。

[GetPixelColor]
格式：{变量名} = GetPixelColor(屏幕X坐标,屏幕Y坐标)
解释：得到指定位置的点的颜色。

[FindColor]
格式：Call FindColor(屏幕左上角x坐标,屏幕左上角y坐标,屏幕右下角x坐标,屏幕右下角y坐标,16进制颜色值,返回x坐标,返回y坐标)
解释：在屏幕区域从左到右、从上到下的查找指定的颜色。

[FindColorEx]
格式：Call FindColorEx(屏幕左上角x坐标,屏幕左上角y坐标,屏幕右下角x坐标,屏幕右下角y坐标,16进制颜色值,查找方式,相似度,返回x坐标,返回y坐标)
解释：在屏幕区域模糊查找指定的颜色。

[FindCenterColor]
格式：Call FindCenterColor(屏幕左上角x坐标,屏幕左上角y坐标,屏幕右下角x坐标,屏幕右下角y坐标,16进制颜色值,返回x坐标,返回y坐标)
解释：在屏幕区域从中心开始查找指定的颜色。

[FindPic]
格式：Call FindPic(屏幕左上角x坐标,屏幕左上角y坐标,屏幕右下角x坐标,屏幕右下角y坐标,bmp格式图片路径,相似度,返回x坐标,返回y坐标)
解释：在屏幕区域查找指定相似度的图片。

[Dim]
格式：Dim {变量名}
解释：定义一个变量。

[ReDim]
格式：ReDim {数组变量名}
解释：重定义一个数组变量下标。
举例：
Dim a()
i=0
ReDim a(i)
a(0)=1
MsgBox a(0)

[Preserve]
解释：当数组被ReDim时，如果参数中有Preserve，已赋值的元素会被保护，值不会变。
举例：
Dim a()
ReDim a(0)
a(0)=1
ReDim Preserve a(2)
MsgBox a(0)
可以发现a(0)的值不会变空。

[Global]
格式：Global {变量名}
解释：定义一个全局变量，主要用于多线程之间传值。

[True]
解释：用于设置一个布尔型的值为真。

[False]
解释：用于设置一个布尔型的值为假。

[Randomize]
解释：初始化随机数生成器。

[Delay]
格式：Delay {延时}
解释：脚本暂停执行一段时间。{延时}里面填写“毫秒”数。
1秒＝1000毫秒
1分钟＝60000毫秒
1小时＝3600000毫秒

[MessageBox]
格式：MessageBox {文字}
解释：简单的弹出一个窗口，显示一段文字。

[MsgBox]
格式：MsgBox {文字},{样式},{标题}
解释：在对话框中显示文字消息，等待用户单击按钮，并返回一个值指示用户单击的按钮。
----按钮类型-----
0  确定
1  确定、取消
2  放弃、重试、忽略
3  是、否、取消
4  是、否
5  重试、取消
----图标类型-----
16 警告“×”
32 询问“？”
48 三角“！”
64 圆形“！”
----默认类型-----
256  第二个按钮为默认按钮
512  第三个按钮为默认按钮
768  第四个按钮为默认按钮
4096 系统模式，在用户响应消息框前，所有应用程序都被挂起
----特殊设置-----
16384   将帮助按钮添加到消息框
65536   指定消息框窗口作为前景窗口
524288  文本为右对齐
1048576 指定文本应为在希伯来和阿拉伯系统中的从右到左显示
----按钮返回值-----
1  确定
2  取消
3  放弃
4  重试
5  忽略
6  是
7  否
举例：MsgBox "弹出对话框内容", 4+32+4096, "提示："

[SayString]
格式：SayString {文字}
解释：在当前窗口输入文字。
举例：SayString "你好啊"

[VBSBegin]
格式：
VBSBegin
…
VBSEnd
解释：构成一个VBScript块。
在VBScript块中可以使用任何VBScript语句（包括VBScript的条件判断、子程序调用等等），也可以使用大多数的按键精灵命令。

[VBSEnd]
格式：
VBSBegin
…
VBSEnd
解释：构成一个VBScript块。
在VBScript块中可以使用任何VBScript语句（包括VBScript的条件判断、子程序调用等等），也可以使用大多数的按键精灵命令。

[UserVar]
用于支持用户设置脚本参数。
标准型自定义变量
格式：UserVar {变量}={默认值} {注释}
解释：这个命令主要用于用户自定义的设置功能。
举例：
UserVar var1=30 "当HP＜多少％时，使用红药"
UserVar var2=30 "当MP＜多少％时，使用蓝药"
当用户使用这个脚本的时候，可以对这var1和var2这两个变量的取值进行设置。

下拉型自定义变量
格式：UserVar 变量=DropList{"选项0"："值0"|"选项1"："值1"|"选项2"："值2"}=默认显示的选项编号 {"注释"}
解释：这个命令预先设定多个变量值，用户可在基面通过下拉方式进行选择
举例：
UserVar Var1=DropList{"低于10%时补血"：0.1|"低于20%时补血"：0.2|"低于30%时补血"：0.3}=2 "自动补血设置"
特别提醒：默认显示的选项编号从0开始。

[DropList]
下拉型自定义变量
格式：UserVar 变量=DropList{"选项0"："值0"|"选项1"："值1"|"选项2"："值2"}=默认显示的选项编号 {"注释"}
解释：这个命令预先设定多个变量值，用户可在基面通过下拉方式进行选择
举例：
UserVar Var1=DropList{"低于10%时补血"：0.1|"低于20%时补血"：0.2|"低于30%时补血"：0.3}=2 "自动补血设置"
特别提醒：默认显示的选项编号从0开始。

[PutAttachment]
格式：PutAttachment {路径},{要释放的文件}
解释：把当前脚本包含的附件展开到指定的路径下。<路径>是指定的相对路径或者绝对路径。
如果省略<路径>或者<路径>为 . ，则默认展开到按键精灵所在的文件夹中，
可以指定要释放的文件，允许使用通配符，如 *.bmp。如果不指定要释放的文件，则默认释放所有文件。
举例：
PutAttachment "C：\","*.bmp"
所有bmp文件释放到C盘

[Import]
格式：Import {vbs文件}
或 Import {插件dll文件}
解释：导入一个vbs文件或者插件dll文件。当文件被导入后，里面的函数可以直接被调用，不需要使用（Plugin.）命令，
在VBScript块中需要调用vbs文件或者插件中的函数时，必须采用这种方式，不能使用（Plugin.）命令。
举例：
Import "msg.dll"
Execute "Msg.Tips(""成功！"")"

[TracePrint]
格式：TracePrint {要输出的信息}
解释：如果脚本在按键精灵的调试状态下运行，这行命令会把要输出的信息（可以包含变量）发送到调试框，
如果脚本不在调试状态下运行，这行命令没有任何作用。

[SetSimMode]
格式：SetSimMode {模拟方式}
解释：设置鼠标、键盘的模拟方式。当模拟方式设为1时，所有的普通模拟都自动变为硬件模拟；当模拟方式设为2时，所有的普通模拟都自动变为超级模拟，
当模拟方式设为0时，将变回普通模拟。

[Beep]
解释：主板蜂鸣器响一声。

[RunApp]
格式：RunApp(要运行的程序或者文件路径)
解释：启动一个程序或者打开一个文件。

[Plugin]
格式：Plugin.{插件名}.{插件函数}
解释：调用一个外部插件提供的函数。我们将逐渐制作多种复杂功能的插件并随按键精灵最新版本提供。

[Lib]
格式：Lib.{命令库名}.{命令库函数}
解释：调用一个命令库提供的函数。我们将逐渐制作多种复杂功能的命令库并随按键精灵最新版本提供。

[LogStart]
格式：LogStart {日志文件名}
解释：将脚本运行的日志信息保存在指定的文件中，以便作者调试检查。
举例：LogStart "C:\日志.log"

[LogStop]
格式：LogStop
解释：停止记录脚本日志，用于配对结束LogStart。

[ExitScript]
格式：ExitScript
解释：退出当前脚本的执行，包含所有子线程。

[RestartScript]
格式：RestartScript
解释：退出当前脚本的执行，包含所有子线程，并重新启动执行。

[DimEnv]
备注：用于多线程环境变量，不推荐新手使用。

[BeginThread]
格式：{返回线程ID} = BeginThread(过程名)
解释：启动某个线程。
备注：用于多线程功能，不推荐新手使用。

[StopThread]
格式：StopThread {线程ID}
解释：停止某个线程。
备注：用于多线程功能，不推荐新手使用。

[PauseThread]
格式：PauseThread {线程ID}
解释：暂停某个线程。
备注：用于多线程功能，不推荐新手使用。

[ContinueThread]
格式：ContinueThread {线程ID}
解释：继续某个线程。
备注：用于多线程功能，不推荐新手使用。

[GetThreadID]
格式：{线程ID} = GetThreadID()
解释：得到当前线程ID。
备注：用于多线程功能，不推荐新手使用。

[OnScriptLoad]
格式：
Sub OnScriptLoad()
…
End Sub
解释：脚本加载时触发的事件。

[OnScriptExit]
格式：
Sub OnScriptExit()
…
End Sub
解释：脚本停止时触发的事件。

[To]
格式：
For 次数变量 = {起始次数} To {终止次数}
…
Next
解释：新语法To循环

[Step]
格式：
For 次数变量 = {起始次数} To {终止次数} Step {步进量}
…
Next
解释：新语法步进Step循环

[DropList]
下拉列表框

[Abs]
格式：Abs(数值)
解释：返回数值的绝对值。

[Atn]
格式：Atn(数值)
解释：返回数值的反正切值。

[Cos]
格式：Cos(数值)
解释：返回某个角的余弦值。

[Exp]
格式：Exp(数值)
解释：返回 e（自然对数的底）的幂次方。

[Fix]
格式：Fix(数值)
解释：返回正数的整数部分。

[Int]
格式：Int(数值)
解释：返回负数的整数部分。

[Log]
格式：Log(数值)
解释：返回数值的自然对数。

[Oct]
格式：Oct(数值)
解释：返回表示数值八进制值的字符串。

[Sgn]
格式：Sgn(数值)
解释：返回表示数值符号的整数。
数值>0 返回 1
数值=0 返回 0
数值<0 返回-1

[Sin]
格式：Sin(数值)
解释：返回某个角的正弦值。

[Rnd]
格式：Rnd(数值)
解释：返回一个随机数。
数值<0 返回相同的随机数
数值=0 返回最近生成的数
数值>0 返回序列中的下一个随机数
省略   同上

[Round]
格式：Round(数值,位数)
解释：返回按指定位数进行四舍五入的数值。
{位数} 可选，小数点右边的位数。

[Sqr]
格式：Sqr(数值)
解释：返回数值的平方根。

[Tan]
格式：Tan(数值)
解释：返回某个角的正切值。

[Asc]
格式：Asc(字符串)
解释：返回与字符串的第一个字母对应的 ANSI 字符代码。
举例：
Dim ANSI
ANSI = Asc("A")      返回 65
ANSI = Asc("a")      返回 97
ANSI = Asc("Apple")  返回 65

[Chr]
格式：Chr(可以标识字符的数字)
解释：返回与指定的 ANSI 字符代码相对应的字符。

[Hex]
格式：Hex(表达式)
解释：返回表示十六进制数字值的字符串。

[InStr]
格式：InStr(数值,内容,字符串,比较类型)
解释：返回某字符串在内容中第一次出现的位置。
{数值}     可选，用于设置每次搜索的开始位置。
{内容}     必选，接受搜索的字符串表达式。
{字符串}   必选，要搜索的字符串表达式。
{比较类型} 可选，0 执行二进制比较(默认)； 1 执行文本比较。

[InStrRev]
格式：InStrRev(数值,内容,字符串,比较类型)
解释：返回某字符串在另一个字符串中出现的从结尾计起的位置。
{数值} 可选，用于设置每次搜索的开始位置。
{内容} 必选，接受搜索的字符串表达式。
{字符串} 必选，要搜索的字符串表达式。
{比较类型} 可选，0 执行二进制比较(默认)； 1 执行文本比较。

[Join]
格式：Join(字符串数组,分隔符)
解释：返回一个字符串，此字符串由包含在数组中的许多子字符串联接创建。 
{字符串数组} 必选，包含要联接的子字符串一维数组。
{分隔符}     可选，在返回字符串中用于分隔子字符串的字符。

[LCase]
格式：LCase(字符串)
解释：返回字符串的小写形式。

[Left]
格式：Left(字符串,要返回字符数)
解释：返回指定数目的从字符串的左边算起的字符。

[Len]
格式：Len(字符串)
解释：返回字符串内字符的数目，或是存储一变量所需的字节数。

[LTrim]
格式：LTrim(字符串)
解释：返回不带前导空格 (LTrim)、后续空格 (RTrim) 或前导与后续空格 (Trim) 的字符串副本。

[RTrim]
格式：RTrim(字符串)
解释：返回不带前导空格 (LTrim)、后续空格 (RTrim) 或前导与后续空格 (Trim) 的字符串副本。

[Trim]
格式：Trim(字符串)
解释：返回不带前导空格 (LTrim)、后续空格 (RTrim) 或前导与后续空格 (Trim) 的字符串副本。

[Mid]
格式：Mid(字符串,开始位置,返回字符数)
解释：从内容中返回指定数目的字符。
{字符串}     从中返回字符。
{开始位置}   字符串中被提取的字符部分的开始位置。
{返回字符数} 要返回的字符数。如省略，则返回的字符串=内容。

[Replace]
格式：Replace(字符串,原字符串,新字符串,起始位置,替换数目,比较类型)
解释：返回字符串，其中指定数目的某子字符串被替换为另一个子字符串。
{字符串}   必选，字符串表达式 包含要替代的子字符串。
{原字符串} 必选，被搜索的子字符串。
{新字符串} 必选，用于替换的子字符串。
{开始位置} 可选，字符串中开始搜索子字符串的位置。默认是 1。
{替换数目} 可选，执行子字符串替换的数目。默认是 -1，表示进行所有可能的替换。
{比较类型} 可选，0 执行二进制比较(默认)； 1 执行文本比较
举例：
i = "我爱你按键精灵"
i = Replace(i, "你", "")
MsgBox i
'运行可以看到“你”字被替换为空。


[Right]
格式：Right(字符串,要返回的字符数)
解释：从字符串右边返回指定数目的字符。

[Space]
格式：Space(需要的空格数)
解释：返回由指定数目的空格组成的字符串。

[StrComp]
格式：StrComp(字符串A,字符串B,比较类型)
解释：返回指示字符串比较结果的值。
{比较类型} 可选，0 执行二进制比较(默认)； 1 执行文本比较。
A<B    返回-1
A=B    返回 0
A>B    返回 1
A/B="" 返回""

[StrReverse]
格式：StrReverse(字符串)
解释：返回字符串，此字符串与指定字符串顺序相反。

[String]
格式：String(字符串长度,字符串/字符代码)
解释：返回具有指定长度的、重复字符组成的字符串。
{字符串长度}      返回字符串的长度。
{字符串/字符代码} 指定字符或字符串表达式的字符代码，其中字符串表达式的第一个字符用于组成返回的字符串。
举例：
Dim 返回值
返回值 = String(5, "2")       '返回"22222"
返回值 = String(5, 50)        '返回"22222"
返回值 = String(10, "ABC")    '返回"AAAAAAAAAA"

[UCase]
格式：UCase(字符串)
解释：返回字符串的大写形式。

[Array]
格式：Array(值0,值1,值2...)
解释：返回包含数组的变量。
{值0,值1,值2...} 是赋给包含在变量中的数组元素的值的列表（用逗号分隔）。
举例：
Dim A
A = Array(10,20,30)
B = A(2)
'则 B 返回的值为：30 

[Filter]
格式：Filter(数组,要搜索的字符串,是否包含)
解释：返回以零为基础的 Array，其中包含以特定过滤条件为基础的字符数组集. 
{数组}           必选，一维数组，要在其中搜索字符串
{要搜索的字符串} 必选，要搜索的字符串
{是否包含}       可选，布尔值，指定返回的子字符串是否包含 要搜索的字符串。
                       如果 是否包含 为 True，Filter将返回包含子字符串 要搜索的字符串 的数组子集。
                       如果 是否包含 为 False，Filter 将返回不包含子字符串 要搜索的字符串 的数组子集
{比较类型}       可选，0 执行二进制比较(默认)； 1 执行文本比较； 2 执行基于数据库（在此数据库中执行比较）中包含的信息的比较
举例：
Dim 索引
Dim 数组(3)
数组(0) = "Sunday"
数组(1) = "Monday"
数组(2) = "Tuesday"
索引 = Filter(数组, "Mon") 
索引的结果 包含了数组中的 "Monday"

[LBound]
格式：LBound(数组变量)
解释：返回指定数组维的最小可用下标。
{数组变量}  必选，数组变量名，遵循标准变量命名约定
{维数}      可选，指明要返回哪一维下界的整数
1 表示第一维（默认）
2 表示第二维
以此类推...

[Split]
格式：Split(字符串,分隔符,返回数目,比较类型)
解释：返回包含数组的变量。
{字符串}   必选，字符串表达式，包含子字符串和分隔符
{分隔符}   可选，用于标识子字符串界限的字符
{返回数目} 可选，被返回的子字符串数目，-1 指示返回所有子字符串
{比较类型} 可选，0 执行二进制比较(默认)； 1 执行文本比较


[UBound]
格式：UBound(数组变量)
解释：返回指定数组维数的最大可用下标。
{数组变量}  必选，数组变量名，遵循标准变量命名约定
{维数}      可选，指明要返回哪一维下界的整数
1 表示第一维（默认）
2 表示第二维
以此类推...

[CBool]
格式：CBool(表达式)
解释：返回表达式，此表达式已转换为布尔子类型的变量。
表达式> 0  返回True
表达式<=0  返回False
如果 {表达式} 不能解释为数值，则将发生运行时错误。
举例：
Dim A, B, Check
A = 5: B = 5            初始化变量
Check = CBool(A = B)    复选框设为 True

A = 0                   定义变量 
Check = CBool(A)        复选框设为 False

[CByte]
格式：CByte(表达式)
解释：返回表达式，此表达式已被转换为二进制子类型的变量。

[CCur]
格式：CCur(表达式)
解释：返回表达式，此表达式已被转换为货币子类型的变量。

[CDate]
格式：CDate(日期表达式)
解释：返回表达式，此表达式已被转换为日期子类型的变量。

[CDbl]
格式：CDbl(表达式)
解释：返回表达式，此表达式已被转换为双精度子类型的变量。

[CInt]
格式：CInt(表达式)
解释：返回表达式，此表达式已被转换为整数子类型的变量。

[CLng]
格式：CLng(表达式)
解释：返回表达式，此表达式已被转换为长度子类型的变量。

[CSng]
格式：CSng(表达式)
解释：返回表达式，此表达式已被转换为单精度子类型的变量。

[CStr]
格式：CStr(表达式)
解释：返回表达式，此表达式已被转换为字符串子类型的变量。
{表达式} 为布尔值  返回字符串，包含 True 或 False。
{表达式} 为日期值  返回字符串，包含系统的短日期格式日期。
{表达式} 为空值    运行时错误。

[RGB]
格式：RGB(红,绿,蓝)
解释：返回代表 RGB 颜色值的整数。
{红}  必选，0 到 255 间的整数，代表颜色中的红色成分。
{绿}  必选，0 到 255 间的整数，代表颜色中的绿色成分。
{蓝}  必选，0 到 255 间的整数，代表颜色中的蓝色成分。
举例：
对于要求反转字节顺序的应用程序，下面函数在反转字节顺序下提供相同信息： 
Function RevRGB(红,绿,蓝)
    RevRGB= CLng(蓝 + (绿 * 256) + (红 * 65536))
End Function

[Date]
解释：返回当前系统日期。

[DateAdd]
格式：DateAdd(间隔类型,间隔个数,日期时间)
解释：返回已添加指定时间间隔的日期。
{间隔类型} 必选，字符串表达式，表示要添加的时间间隔类型。
{间隔个数} 必选，数值表达式，表示要添加的时间间隔的个数。
{日期时间} 必选，表示日期的文字或变量。
间隔类型：yyyy	年
	  q	季度
	  m	月
	  y	一年的日数
	  d	日
	  w	一周的日数
	  ww	周
	  h	小时
	  n	分钟
	  s	秒
间隔个数>0 得到未来的日期
间隔个数<0 得到过去的日期

[DateDiff]
格式：DateDiff(间隔类型,开始时间,结束时间)
解释：返回两个日期之间的时间间隔。
{间隔类型} 必选，字符串表达式，表示表示用于计算 {开始时间} 和 {结束时间} 之间的时间间隔类型。
{开始时间} 必选，表示日期的文字或变量。
{结束时间} 必选，表示日期的文字或变量。
间隔类型：yyyy	年
	  q	季度
	  m	月
	  y	一年的日数
	  d	日
	  w	一周的日数
	  ww	周
	  h	小时
	  n	分钟
	  s	秒

[DatePart]
格式：DatePart(间隔类型,日期时间)
解释：返回给定日期的指定部分。
{间隔类型} 必选，字符串表达式，表示要返回的时间间隔类型。
{日期时间} 必选，日期表达式，用于计算的两个日期。
{周的起始} 可选，指定星期中第一天的常数。如果没有指定，则默认为星期日。
{年的起始} 可选，指定一年中第一周的常数。如果没有指定，则默认为 1 月 1 日所在的星期。
间隔类型：yyyy	年
	  q	季度
	  m	月
	  y	一年的日数
	  d	日
	  w	一周的日数
	  ww	周
	  h	小时
	  n	分钟
	  s	秒

周的起始：0	使用区域语言支持 (NLS) API 设置
	  1	星期日（默认）
	  2	星期一
	  3	星期二
	  4	星期三
	  5	星期四
	  6	星期五
	  7	星期六

年的起始：0	使用区域语言支持 (NLS) API 设置
	  1	由 1 月 1 日所在的星期开始（默认）
	  2	由在新年中至少有四天的第一周开始
	  3	由在新的一年中第一个完整的周开始

[DateSerial]
格式：DateSerial(年,月,日)
解释：对于指定的年、月、日，返回日期子类型的变量。

[DateValue]
格式：DateValue(日期字符串表达式)
解释：返回日期子类型的变量。

[Day]
格式：Day(日期表达式)
解释：返回 1 到 31 之间的一个整数（包括 1 和31），代表某月中的一天。

[Hour]
格式：Hour(时间表达式)
解释：返回 0 到 23 之间的一个整数（包括 0 和 23），代表一天中的某一小时。

[Minute]
格式：Minute(时间表达式)
解释：返回 0 到 59 之间的一个整数（包括 0 和59），代表一小时内的某一分钟。

[Month]
格式：Month(日期表达式)
解释：返回 1 到 12 之间的一个整数（包括 1 和 12），代表一年中的某月。

[MonthName]
格式：MonthName(月份的数值)
解释：返回表明指定月份的字符串。
{月份的数值} 必选，月份的数值定义。
{是否简写}   可选，布尔值，表明月份名称是否简写。默认值为 False。

[Now]
解释：根据计算机系统设定的日期和时间返回当前的日期和时间值。

[Second]
格式：Second(时间表达式)
解释：返回 0 到 59 之间的一个整数（包括 1 和 59），代表一分钟内的某一秒。

[Time]
解释：返回当前系统时间。

[TimeSerial]
格式：TimeSerial(小时,分钟,秒)
解释：返回一个日期子类型的变量，含有指定时、分、秒的时间。

[TimeValue]
格式：TimeValue(时间表达式)
解释：返回包含时间的日期子类型的变量。
举例：
Dim 时间
时间 = TimeValue("4:35:17 PM")
将字符串 "4:35:17 PM" 转化成了时间：#16:35:17#

[Weekday]
格式：Weekday(日期表达式)
解释：返回代表一星期中某天的整数。
{日期表达式} 必选，可以代表日期的任意表达式。
{周的起始}   可选，指定星期中第一天的常数。
周的起始：0	使用区域语言支持 (NLS) API 设置
	  1	星期日（默认）
	  2	星期一
	  3	星期二
	  4	星期三
	  5	星期四
	  6	星期五
	  7	星期六
举例：
Dim 日期, 当天星期
日期 = #October 19, 1962#	日期  1962-10-19
当天星期 = Weekday(日期)	返回  6
得到 1962 年 10 月 19 日为星期五。

[WeekdayName]
格式：WeekdayName(星期中某天的数值)
解释：返回一个字符串，表示星期中指定的某一天。
{星期中某天的数值} 必选，星期中某天的数值定义。
{是否缩写}	   可选，布尔值，指明是否缩写表示星期各天的名称，默认值为 False。
{周的起始}	   可选，指明星期第一天的数值。
周的起始：0	使用区域语言支持 (NLS) API 设置
	  1	星期日（默认）
	  2	星期一
	  3	星期二
	  4	星期三
	  5	星期四
	  6	星期五
	  7	星期六
举例：
Dim 星期
星期 = WeekDayName(6, True)  '星期的值为星期五。

[Year]
格式：Year(日期表达式)
解释：返回一个代表某年的整数。
举例：
Dim MyDate, MyYear
MyDate = #October 19, 1962#   '分派一日期。
MyYear = Year(MyDate)         ' MyYear 包含 1962。
得到该日期的年份为1962年。

[CreateObject]
格式：CreateObject(应用程序名.对象类型)
解释：创建并返回对自动化操作对象的引用。
{应用程序名} 提供对象的应用程序名称。
{对象类型}   要创建的对象类型或类。
举例：
Dim ExcelSheet
Set ExcelSheet = CreateObject("Excel.Sheet")

ExcelSheet.Application.Visible = True	
通过自动化操作对象使 Excel 可见。

ExcelSheet. ActiveSheet.Cells(1,1).Value = "这是 A 列第一行"
在工作表的第一个单元中放置文本。

ExcelSheet.SaveAs "C:\DOCS\TEST.XLS"
保存工作表。

ExcelSheet.Application.Quit
在自动化操作对象中使用 Quit 方法退出 Excel。

Set ExcelSheet = Nothing
释放对象变量。


[Eval]
格式：Eval(表达式)
解释：计算一个表达式的值并返回结果。
{表达式} 必选，可以是包含任何有效 VBScript 表达式的字符串。
举例：
Sub GuessANumber
Dim Guess, RndNum
RndNum = Int((100) * Rnd(1) + 1)
Guess = CInt(InputBox("Enter your guess:",,0))
Do
    If Eval("Guess = RndNum") Then
        MsgBox "祝贺你！猜对了！"
        Exit Sub
    Else
        Guess = CInt(InputBox("对不起，请再试一次",,0))
    End If
Loop Until Guess = 0
End Sub 

[FormatCurrency]
格式：FormatCurrency(表达式)
解释：返回表达式，此表达式已被格式化为货币值（使用系统控制面板中定义的货币符号）。 
{表达式}   必选，要被格式化的表达式。
{小数位数} 可选，指示小数点右侧显示位数的数值，默认值为 -1。
{是否显零} 可选，三态常数，指示是否显示小数值小数点前面的零。
{是否在内} 可选，三态常数，指示是否将负值置于括号中。
{是否默认} 可选，三态常数，指示是否使用计算机区域设置中指定的数字分组符号将数字分组。
是否显零、是否在内、是否默认：-1	True
			       0	False
			      -2	使用计算机区域设置中的设置
举例：
Dim MyCurrency
MyCurrency = FormatCurrency(1000)  'MyCurrency的值为 $1000.00

[FormatDateTime]
格式：FormatDateTime(日期表达式)
解释：返回表达式，此表达式已被格式化为日期或时间。 
{日期表达式}   必选，要被格式化的日期表达式。
{日期时间格式} 可选，指示所使用的日期/时间格式的数值，默认使用 vbGeneralDate。
日期时间格式：0  显示日期和/或时间
		 如果有日期部分，则将该部分显示为短日期格式
		 如果有时间部分，则将该部分显示为长时间格式
		 如果都存在，则显示所有部分
	      1  使用计算机区域设置中指定的长日期格式显示日期
	      2  使用计算机区域设置中指定的短日期格式显示日期
	      3  使用计算机区域设置中指定的时间格式显示时间
	      4  使用 24 小时格式 (hh:mm) 显示时间
举例：
Function GetCurrentDate 
  //FormatDateTime 把日期型格式化为长日期型。
  GetCurrentDate = FormatDateTime(Date, 1) 
End Function

[FormatNumber]
格式：FormatNumber(表达式)
解释：返回表达式，此表达式已被格式化为数值。
{表达式}   必选，要被格式化的表达式。
{小数位数} 可选，指示小数点右侧显示位数的数值，默认值为 -1。
{是否显零} 可选，三态常数，指示是否显示小数值小数点前面的零。
{是否在内} 可选，三态常数，指示是否将负值置于括号中。
{是否默认} 可选，三态常数，指示是否使用计算机区域设置中指定的数字分组符号将数字分组。
是否显零、是否在内、是否默认：-1	True
			       0	False
			      -2	使用计算机区域设置中的设置
举例：
Function FormatNumberDemo 
  Dim MyAngle, MySecant, MyNumber
  MyAngle = 1.3                               ' 用弧度定义角。
  MySecant = 1 / Cos(MyAngle)   	      ' 计算正割值。
  FormatNumberDemo = FormatNumber(MySecant,4) ' 把 MySecant 格式化为带四位小数点的数。
End Function

[FormatPercent]
格式：FormatPercent(表达式)
解释：返回表达式，此表达式已被格式化为尾随有 % 符号的百分比（乘以 100 ）。
{表达式}   必选，要被格式化的表达式。
{小数位数} 可选，指示小数点右侧显示位数的数值，默认值为 -1。
{是否显零} 可选，三态常数，指示是否显示小数值小数点前面的零。
{是否在内} 可选，三态常数，指示是否将负值置于括号中。
{是否默认} 可选，三态常数，指示是否使用计算机区域设置中指定的数字分组符号将数字分组。
是否显零、是否在内、是否默认：-1	True
			       0	False
			      -2	使用计算机区域设置中的设置
举例：
Dim MyPercent
MyPercent = FormatPercent(2/32) 'MyPercent 包含 6.25%。

[GetObject]
格式：GetObject(对象路径)
解释：返回对文件中自动化操作对象的引用。 
{对象路径}  		   可选，字符串，包含待检索对象的文件的完整路径和名称。
{应用程序名称.对象的类型}  可选，字符串，对象的类。
如果省略 {对象路径} 则必须有 {对象的类} 。
举例：
Dim CADObject
Set CADObject = GetObject("C:\CAD\SCHEMA.CAD")
Set LayerObject = GetObject("C:\CAD\SCHEMA.CAD!Layer3") '用惊叹号(!)标识要激活的文件。

Dim MyObject
Set MyObject = GetObject("C:\DRAWINGS\SAMPLE.DRW", "FIGMENT.DRAWING")

MyObject.Line 9, 90
MyObject.InsertText 9, 100, "嗨，你好！"
MyObject.SaveAs "C:\DRAWINGS\SAMPLE.DRW"

[InputBox]
格式：InputBox(字符串, 标题, 输入框, 样式)
解释：在对话框中显示提示，等待用户输入文本或单击按钮，并返回文本框内容。
{字符串} 必选，对话框内容
{标题}   可选，对话框标题
{输入框} 可选，输入框的默认值
{样式}   可选，参考MsgBox的样式
举例：
Dim Input
Input = InputBox("输入名字", "标题", "张三", 0)
If IsEmpty(Input) Then
   MsgBox ("取消输入")
Else
   MsgBox ("输入: " & Input)
End If

[IsArray]
格式：IsArray(变量)
解释：返回布尔值指明某变量是否为数组。
举例：
Dim MyVariable
Dim MyArray(3)
MyArray(0) = "Sunday"
MyArray(1) = "Monday"
MyArray(2) = "Tuesday"
MyVariable = IsArray(MyArray) ' MyVariable 包含 "True"

[IsDate]
格式：IsDate(日期)
解释：返回布尔值指明某表达式是否可以转换为日期。
举例：
Dim MyDate, YourDate, NoDate, MyCheck
MyDate = "October 19, 1962": YourDate = #10/19/62#: NoDate = "Hello"
MyCheck = IsDate(MyDate)            ' 返回 True
MyCheck = IsDate(YourDate)          ' 返回 True
MyCheck = IsDate(NoDate)            ' 返回 False

[IsEmpty]
格式：IsEmpty(表达式)
解释：返回布尔值指明变量是否已初始化。
举例：
Dim MyVar, MyCheck
MyCheck = IsEmpty(MyVar)      ' 返回 True

MyVar = Null                  ' 赋为 Null
MyCheck = IsEmpty(MyVar)      ' 返回 False

MyVar = Empty                 ' 赋为 Empty
MyCheck = IsEmpty(MyVar)      ' 返回 True

[IsNull]
格式：IsNull(表达式)
解释：返回布尔值，指明表达式是否不包含任何有效数据 (Null)。
{表达式}无效  返回True
{表达式}有效  返回False
举例：
Dim MyVar, MyCheck
MyCheck = IsNull(MyVar)      ' 返回 False

MyVar = Null                 ' 赋为 Null
MyCheck = IsNull(MyVar)      ' 返回 True

MyVar = Empty                ' 赋为 Empty
MyCheck = IsNull(MyVar)      ' 返回 False

[IsNumeric]
格式：IsNumeric(表达式)
解释：返回布尔值指明表达式的值是否为数字。
如果 {表达式} 是日期表达式，IsNumeric 函数返回 False。
举例：
Dim MyVar, MyCheck
MyVar = 53                    '赋值。
MyCheck = IsNumeric(MyVar)    ' 返回 True

MyVar = "459.95"              ' 赋值。
MyCheck = IsNumeric(MyVar)    ' 返回True

MyVar = "45 Help"             ' 赋值。
MyCheck = IsNumeric(MyVar)    ' 返回 False

[IsObject]
格式：IsObject(表达式)
解释：返回布尔值指明表达式是否引用了有效的自动化操作对象。
举例：
Dim MyInt, MyCheck, MyObject
Set MyObject = Me           
MyCheck = IsObject(MyObject)  ' 返回 True
MyCheck = IsObject(MyInt)     ' 返回 False

[LoadPicture]
格式：LoadPicture(文件名称)
解释：返回图片对象。

[ScriptEngine]
格式：ScriptEngine
解释：返回一个代表当前使用的 Script 程序语言的字符串。
VBScript  表明当前使用的 Script 引擎是 。
JScript   表明当前使用的 Script 引擎是 Microsoft JScript^TM。
VBA       表明当前使用的 Script 引擎是 Microsoft Visual Basic for Applications。
举例：
Function GetScriptEngineInfo
  Dim s
  s = ""   '用必要的信息形成字符串
  s = ScriptEngine & " Version "
  s = s & ScriptEngineMajorVersion & "."
  s = s & ScriptEngineMinorVersion & "."
  s = s & ScriptEngineBuildVersion 
  GetScriptEngineInfo =  s  '返回结果
End Function

[ScriptEngineBuildVersion]
格式：ScriptEngineBuildVersion
解释：返回使用的 Scripting 引擎的编译版本号。
举例：
Function GetScriptEngineInfo
  Dim s
  s = ""   '用必要的信息形成字符串
  s = ScriptEngine & " Version "
  s = s & ScriptEngineMajorVersion & "." 
  s = s & ScriptEngineMinorVersion & "." 
  s = s & ScriptEngineBuildVersion	 '编译
  GetScriptEngineInfo = s  '返回结果
End Function

[ScriptEngineMajorVersion]
格式：ScriptEngineMajorVersion
解释：返回使用的 Scripting 引擎的主版本号。
举例：
Function GetScriptEngineInfo
  Dim s
  s = ""   '用必要的信息形成字符串
  s = ScriptEngine & " Version "
  s = s & ScriptEngineMajorVersion & "." '主
  s = s & ScriptEngineMinorVersion & "."
  s = s & ScriptEngineBuildVersion
  GetScriptEngineInfo = s  '返回结果
End Function

[ScriptEngineMinorVersion]
格式：ScriptEngineMinorVersion
解释：返回使用的 Scripting 引擎的次版本号。
举例：
Function GetScriptEngineInfo
  Dim s
  s = ""   '用必要的信息形成字符串。
  s = ScriptEngine & " Version "
  s = s & ScriptEngineMajorVersion & "."
  s = s & ScriptEngineMinorVersion & "." '次
  s = s & ScriptEngineBuildVersion
  GetScriptEngineInfo = s  '返回结果
End Function

[TypeName]
格式：TypeName(变量)
解释：返回一个字符串，提供有关变量的变量子类型信息。
返回值：Byte	  字节值
	Integer   整型值
	Long	  长整型值
	Single    单精度浮点值
	Double    双精度浮点值
	Currency  货币值
	Decimal   十进制值
	Date	  日期或时间值
	String    字符串值
	Boolean   变量值；True 或 False
	Empty	  未初始化
	Null	  无有效数据
   <object type>  实际对象类型名
	Object    一般对象
	Unknown   未知对象类型
	Nothing   还未引用对象实例的对象变量
	Error	  错误
举例：
Dim ArrayVar(4), MyType
NullVar = Null    ' 赋 Null 值

MyType = TypeName("VBScript")   ' 返回 "String"
MyType = TypeName(4)            ' 返回 "Integer"
MyType = TypeName(37.50)        ' 返回 "Double"
MyType = TypeName(NullVar)      ' 返回 "Null"
MyType = TypeName(ArrayVar)     ' 返回 "Variant()"

[VarType]
格式：VarType(变量)
解释：返回指示变量子类型的值。
返回值：0	Empty（未初始化）
	1	Null（无有效数据）
	2	整数
	3	长整数
	4	单精度浮点数
	5	双精度浮点数
	6	货币
	7	日期
	8	字符串
	9	Automation 对象
	10	错误
	11	Boolean
	12	Variant（只和变量数组一起使用）
	13	数据访问对象
	17	字节
	8192	数组
举例：
Dim MyCheck
MyCheck = VarType(300)           ' 返回 2
MyCheck = VarType(#10/19/62#)    ' 返回 7
MyCheck = VarType("VBScript")    ' 返回 8

[Add]
格式：object.Add key, item
解释：向 Dictionary 对象添加键和项目对。
{object}  必选，应为 Dictionary 对象的名称。
{key}	  必选，与添加的 item 相关的 key。
{item}	  必选，与添加的 key 相关的 item。 
如果 {key} 已经存在，则会出现错误。
举例：
Dim d                   '创建变量
Set d = CreateObject("Scripting.Dictionary")
d.Add "a", "Athens"     '添加一些键和项目 
d.Add "b", "Belgrade"
d.Add "c", "Cairo"

格式：object.Add (folderName)
解释：向 Folders 集合添加新 Folder。
{object}      必选，应为 Folders 集合的名称。
{folderName}  必选，应为 Folders 集合的名称。
如果 {folderName} 已经存在，则会出现错误。
举例：
Sub AddNewFolder(path, folderName)
  Dim fso, f, fc, nf
  Set fso = CreateObject("Scripting.FileSystemObject")
  Set f = fso.GetFolder(path)
  Set fc = f.SubFolders
  If folderName <> "" Then
    Set nf = fc.Add(folderName)
  Else
    Set nf = fc.Add("New Folder")
  End If
End Sub

[And]
解释：逻辑运算符 <与>

[Or]
解释：逻辑运算符 <或>

[Not]
解释：逻辑运算符 <非>

[Is]
格式：{返回值} = {表达式A} Is {表达式B}
解释：用于比较两个对象引用变量。
如果 {表达式A} 和 {表达式B} 都引用同一个对象，
  则 {返回值} 为 True；
否则 {返回值} 为 False。

[Imp]
格式：{返回值} = {表达式A} Imp {表达式B}
解释：逻辑运算符 <蕴涵>

表达式A    表达式B    返回值
True 	   True       True 
True 	   False      False 
True       Null       Null 
False      True       True 
False      False      True 
False      Null       True 
Null       True       True 
Null       False      Null 
Null       Null       Null 

[Xor]
格式：{返回值} = {表达式A} Xor {表达式B}
解释：逻辑运算符 <异或>

表达式A    表达式B    返回值
True 	   True       False 
True 	   False      True 
False      True       True 
False 	   False      False

[Eqv]
格式：{返回值} = {表达式A} Eqv {表达式B}
解释：逻辑运算符 <等价>

表达式A    表达式B    返回值
True       True       True 
True       False      False 
False      True       False 
False      False      True 

[Set]
解释：将对象引用赋给变量或属性。

[Nothing]
格式：Set {对象名} = Nothing
解释：停止 {对象名} 与任何指定对象的关联。

[Erase]
格式：Erase 数组变量
解释：清除数组。
重新初始化固定大小数组的元素，并释放动态数组的存储空间。
固定数值数组…………将每个元素设置为 0
固定字符串数组………将每个元素设置为零长度字符串 ("")
对象数组………………将每个元素设置为特殊值 Nothing

[Const]
格式：Const 常数名=文字或常数
解释：声明用于代替文字值的常数。 

[Mod]
格式：余数 = {数值} Mod {数值}
解释：用于两个数值相除并返回其余数。

[Attachment:\]
解释：附件的内部调用路径。

[Hwnd]
解释：默认句柄变量。

[intX]
解释：默认 X 变量。

[intY]
解释：默认 Y 变量。

[vbCrLf]
解释：回车符与换行符连接在一起。

[Timer]
解释：从开机到当前的时间间隔，单位为（秒），精确到毫秒。

[Popup]
格式：{返回值} = WshShell.Popup({内容},[延迟(秒)],[标题],[按钮])
----按钮类型-----
0 显示“确定”按钮。 
1 显示“确定”和“取消”按钮。 
2 显示“放弃”、“重试”和“忽略”按钮。 
3 显示“是”、“否”和“取消”按钮。 
4 显示“是”和“否”按钮。 
5 显示“重试”和“取消”按钮。 
-----图标类型-----
16 显示“停止标记”图标。 
32 显示“问号”图标。 
48 显示“感叹号”图标。 
64 显示“信息标记”图标。 
------按钮返回值---- 
1 “确定”按钮 
2 “取消”按钮 
3 “放弃”按钮 
4 “重试”按钮 
5 “忽略”按钮 
6 “是”按钮 
7 “否”按钮 
举例:
Dim WshShell, BtnCodeSet 
set WshShell = CreateObject("WScript.Shell")
BtnCode = WshShell.Popup("你感觉如何?", 7, "提示", 32+4)
'显示对话框,7秒后自动关闭,图标是"问号",按钮有"是","否"
'如果按"是",BtnCode =6,按"否",BtnCode =7,不按7秒后按"是",BtnCode =-1

[Each]
格式:
For Each {当前数组的值} in {数组} 
Next
解释：遍历数组中所有的值，{当前数组的值}只是数组中的一个值。
举例:
Dim 数组,i
数组=Array("我",“爱”,“你”,“！”)
For Each i in 数组
    TracePrint i
Next

[Escape]
格式：{返回值} = Escape({字符串})
解释：将字符串转换成 URL编码，
该方法不会对 ASCII 字母和数字进行编码，
也不会对这7个 ASCII 标点符号进行编码【+ - * / . _ @】
举例：TracePrint Escape("+-*/._@符号没有编码！")

[UnEscape]
格式：{返回值} = UnEscape({URL编码})
解释：解读 Escape() 的编码。
举例：
'输出的是 “WSCRIPT.SHELL”
TracePrint UnEscape("%57%53%43%52%49%50%54%2E%53%48%45%4C%4C")

[Execute]
格式：Execute {VBS代码}
解释：将代码转化成字符串进行执行。
举例：Execute "msgbox ""执行完毕！"""

[Regsvr32]
格式：RunApp {Regsvr32 [功能] 插件路径}
解释：Regsvr32命令用于注册动态链接库文件。
{功能} 
/u    卸载插件
/s    安静注册插件
省略  注册插件
举例：
RunApp "Regsvr32 Alt.dll" '注册系统插件 

[vbFormFeed]
值：Chr(12) 
解释：换页符；在 Microsoft Windows 中不适用

[vbNewLine] 
值：Chr(13) & Chr(10) 或 Chr(10) 
解释：平台指定的新行字符；适用于任何平台 

[vbNullChar] 
值：Chr(0) 
解释：值为 0 的字符 

[vbNullString] 
解释：值为 0 的字符串，与零长度字符串 ("") 不同；用于调用外部过程 

[vbTab] 
值：Chr(9) 
解释：水平附签 

[vbVerticalTab]
值：Chr(11) 
解释：垂直附签；在 Microsoft Windows 中不适用

[SetEnv]
格式：返回值 = SetEnv({变量名}, 值)
解释：对环境变量赋值，返回True表示成功。
等同于【变量名 = 值】
举例：
TracePrint SetEnv("BLM", 1000)

[GetEnv]
格式：返回值 = GetEnv({变量名})
解释：读取环境变量的值，返回读取到的值。
等同于【TracePrint 变量名】
举例：
TracePrint GetEnv("BLM")

[GetMacroID]
格式：返回值 = GetMacroID()
解释：返回脚本ID，也就是 uservar.ini 配置中的小节名。
(此功能只有在9.63版本及以上能使用！)
举例：
Msgbox GetmacroID()

[Null]
解释：表示一个变量不包含任何有效数据

[Boolean]
解释：布尔型，包含 True 或 False。

[ByVal]
解释：传送参数内存的一个拷贝给被调用者。
ByVal是传递值，源数据不会被修改 
你可以把这个值当作自己的局部变量来使用。
举例：
Execute _
"Function Fun (ByVal a,ByRef b)" & vbCrLf &_
"	a = 5                      " & vbCrLf &_
"	b = 6                      " & vbCrLf &_
"	Fun = 0                    " & vbCrLf &_
"End Function                  "
I = 1
I = 2
Call Fun(I, J)
MsgBox "I 的值：1" & "变" & I 'ByVal 是传值，a 修改的只是 I 的复制体，所以 I 的本体没变，
MsgBox "J 的值：2" & "变" & J 'ByRef 是传址，b 修改的就是 J 的本体，所以 J 的本体变了。

[ByRef]
解释：传送参数内存的实际地址给被调用者，被调用者可以直接更改该地址中的内容。
ByRef是传递地址，源数据可能被修改 
你对这个变量的操作将对你传入的那个变量产生影响，就像指针的感觉，可以当全局变量使用。
举例：
Execute _
"Function Fun (ByVal a,ByRef b)" & vbCrLf &_
"	a = 5                      " & vbCrLf &_
"	b = 6                      " & vbCrLf &_
"	Fun = 0                    " & vbCrLf &_
"End Function                  "
I = 1
I = 2
Call Fun(I, J)
MsgBox "I 的值：1" & "变" & I 'ByVal 是传值，a 修改的只是 I 的复制体，所以 I 的本体没变，
MsgBox "J 的值：2" & "变" & J 'ByRef 是传址，b 修改的就是 J 的本体，所以 J 的本体变了。

[Byte]
解释：字节子类型数组。
举例：
Dim xmldoc, node, bytes 
Set xmldoc = CreateObject("Msxml2.DOMDocument") 
Set node = xmldoc.CreateElement("binary") 
	node.DataType = "bin.hex" 
	'demon.tw 的十六进制值为 
	'64 65 6D 6F 6E 2E 74 77 
	node.Text = "64656D6F6E2E7477" 
	bytes = node.NodeTypedValue
Set node = Nothing 
Set xmldoc = Nothing 
MsgBox bytes
MsgBox VarType(bytes)  '8192 指的是数组
MsgBox TypeName(bytes) 'Byte()

[Class]
解释：使用Class语句可以创建一个对象，可以为它编写字段、属性及方法，
它只有两个对象事件―― Initialize 与 Terminate
举例：
Execute _
"Set MyUser = New User                                     " & vbCrLf &_
"Class User                                                " & vbCrLf &_
"    'Initialize 事件相当于构造函数，相当于 OnScriptLoad() " & vbCrLf &_
"    Private Sub Class_Initialize  '当这个类被创建时执行   " & vbCrLf &_
"       MsgBox ""类开始""                                  " & vbCrLf &_
"    End Sub                                               " & vbCrLf &_
"    'Terminate 事件相当于析构函数, 相当于 OnScriptExit()  " & vbCrLf &_
"    Private Sub Class_Terminate  '当类被销毁时执行        " & vbCrLf &_
"        MsgBox ""类结束""                                 " & vbCrLf &_
"    End Sub                                               " & vbCrLf &_
"End Class                                                 "
//下面这段代码运行完毕才会弹出 “类结束”
For i = 0 To 3
    MsgBox i
    Delay 1000
Next

[Currency]
解释： Currency 数据类型 Currency 变量存储为 64 位（8 个字节）整型的数值形式，然后除以 10,000 给出一个定点数，其小数点左边有 15 位数字，右边有 4 位数字。
取值范围为 -922,337,203,685,477.5808 到 922,337,203,685,477.5807
Currency 的类型声明字符为 @
Currency 数据类型在货币计算与定点计算中很有用，在这种场合精度特别重要。
举例：
MsgBox TypeName(CCur(3.14))

[Double]
解释：Double 变量以带符号的 IEEE 64 位（8 个字节）双精度浮点数形式存储，也就是小数。
负值取值范围为 -1.79769313486231570E+308 到 -4.94065645841246544E-324，
正值取值范围为 4.94065645841246544E-324 到 1.79769313486231570E+308
Double 数据类型可以转换为 Decimal 数据类型，而不会出现 System.OverflowException 错误。
在文本后追加文本类型字符 R 可将其强制转换成 Double 数据类型。
在任何标识符后追加标识符类型字符 # 可将其强制转换成 Double 数据类型
举例：
MsgBox TypeName(3.14)

[Empty]
解释：用于指明未初始化的变量值。
举例：
Dim 数据类型
数据类型 = Empty
MsgBox TypeName(数据类型)

[Option Explicit]
格式：Option Explicit
解释：强制要求显式声明脚本中的所有变量。
如果使用 Option Explicit，该语句必须出现在脚本的任何其他语句之前。
使用 Option Explicit 语句时，
必须使用 Dim、Private、Public 或 ReDim 语句显式声明所有变量。
如果试图使用未经声明的变量名，则会出现错误。

[Option]
格式：Option Explicit
解释：强制要求显式声明脚本中的所有变量。
如果使用 Option Explicit，该语句必须出现在脚本的任何其他语句之前。
使用 Option Explicit 语句时，
必须使用 Dim、Private、Public 或 ReDim 语句显式声明所有变量。
如果试图使用未经声明的变量名，则会出现错误。

[Explicit]
格式：Option Explicit
解释：强制要求显式声明脚本中的所有变量。
如果使用 Option Explicit，该语句必须出现在脚本的任何其他语句之前。
使用 Option Explicit 语句时，
必须使用 Dim、Private、Public 或 ReDim 语句显式声明所有变量。
如果试图使用未经声明的变量名，则会出现错误。

[On Error Resume Next]
格式：On Error Resume Next
解释：启动错误处理程序，忽略错误继续运行下一句。

[Single]
解释： Single 变量（4 字节）单精度浮点值, Single 能表示最大精度是小数点后约六位。
负数范围从 -3.402823E38 到 -1.401298E-45
正数范围从 1.401298E-45 到 3.402823E38
举例：
Dim 数据类型
数据类型 = CSng(3.14)
MsgBox TypeName(数据类型)

[Type]
解释：返回文件或文件夹的类型信息。
object.Type
object 应为 File 或 Folder 对象的名称
举例：
filespec = 文件夹路径
Dim fso, f, s
Set fso = CreateObject("Scripting.FileSystemObject")
Set f = fso.GetFolder(filespec)
s = UCase(f.Name) & " 的类型为 " & f.Type 
MsgBox s

[Variant]
解释：VBS中的默认数据类型。

[QMPlugin]
解释：按键精灵自带插件的工程名。
举例：
Set m = CreateObject("QMPlugin.Msg") 
Execute "m.Tips(""成功！"")"

[With]
格式：
While {对象}
…
Wend
解释：对一个对象执行一系列的语句。
举例：
Set ObjStream = CreateObject("Adodb.Stream")
With ObjStream
    .Type = 1
    .Mode = 3
    .Open
    .Write xmlBody
    .Position = 0
    .Type = 2
    .Charset = "UTF-8"
    BytesToBstr = .ReadText
    .Close
End With
Set ObjStream = Nothing 

[End With]
解释：用于配对结束 With 对象结构。

[Byte]
解释：字节型，范围 0 ～ 255（0 至 2^8-1）。

[Long]
解释：长整型，范围 -2,147,483,648 ～ 2,147,483,647（-2^31 至 2^31-1）。

[Integer]
解释：短整型，范围 -32,768 ～ 32,767（-2^15 至 2^15-1）。

[Double]
解释：双精度浮点型，范围 1.7E-308 ～ 1.7E+308（-2^1024 至 2^1024），占8个字节（64位）内存空间。

[Single]
解释：单精度浮点型，范围 1.7E-38 ～ 1.7E+38（-2^128 至 2^128），占4个字节（32位）内存空间。

[Object]
解释：对象型，任何 Object 引用。

[GetExeDir]
格式：{返回值} = GetExeDir()
解释：得到当前程序路径，尾部带 “\”
(此功能只有在2014.03.16480版本及以上能使用！)
举例：
TracePrint GetExeDir()

[GetScreenResolution]
格式：Call GetScreenResolution(返回屏幕分辨率宽度, 返回屏幕分辨率高度)
解释：得到当前屏幕分辨率

[LoadPicture]
格式：Set 对象 = LoadPicture(图片路径)
解释：返回被载入图片文件的对象
举例：
    Set p = LoadPicture("C:\1.bmp")
    获取图片尺寸 = Round(p.width * 96 / 2540) &"|"& Round(p.height * 96 / 2540)
    Set p = Nothing

[QMLibrary]
格式：QMLibrary.{命令}(参数...)
解释：执行按键精灵基本命令的对象
举例：
    //以“超级“模式，模拟按一次 A 键
    //模拟方式(0普通|1硬件|2超级) 
    模式 = 2
    QMLibrary.KeyPress "A", 模式, 1

    //脚本退出运行
    QMLibrary.ExitScript(0)

    //重新启动脚本运行
    QMLibrary.ExitScript(1)

[QUIMethodObj]
格式：QUIMethodObj.{控件类型}_{方法}(界面控件名, 参数...)
解释：执行按键精灵界面控件方法的对象
举例：
    //添加新的内容到列表框中
    QUIMethodObj.ListBox_AddItem "Form1.ListBox1", "新的内容"

[F2730835_2229_445E_97C7_l3F7612771DA]
格式：F2730835_2229_445E_97C7_l3F7612771DA.{变量名}
解释：包含当前线程所有定义变量的一个类
举例：
    //定义一个变量
    Dim Text
    Text = "变量的内容"
    TracePrint F2730835_2229_445E_97C7_l3F7612771DA.Text

[F2730835_2229_445E_97C7_13F76l277lDA]
格式：F2730835_2229_445E_97C7_13F76l277lDA.{变量名}
解释：包含当前线程所有定义变量的一个类
举例：
    //定义一个变量
    Dim Text
    Text = "变量的内容"
    TracePrint F2730835_2229_445E_97C7_13F76l277lDA.Text